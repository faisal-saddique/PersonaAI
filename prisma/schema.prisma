generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  password          String?
  accounts          Account[]
  Authenticator     Authenticator[]
  sessions          Session[]
  avatar            String?
  type              UserType            @default(user)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserType {
  user
  admin
}

model PersonaProfile {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  avatar              String?

  // Basic Information
  fullName            String
  age                 Int
  residence           String
  passion             String

  // Personality & Traits
  characterTraits     String[] // Stored as array
  otherTrait          String?
  roleModel           String?
  personalValues      String

  // Skills & Experience
  expertise           String
  experienceLevel     String
  achievements        String
  dailyRoutine        String

  // Challenges & Growth
  obstacles           String
  overcomingChallenges String
  handlingPressure    String

  // Future Goals & Aspirations
  tenYearVision       String
  fieldChange         String
  bestAdvice          String

  // Conversation Starters
  conversationStarter1 String
  conversationStarter2 String?
  conversationStarter3 String?
  conversationStarter4 String?
}

// New models for admin settings

model ModelConfig {
  id                Int        @id @default(autoincrement())
  name              String     // Display name for the model
  provider          String     // "openai", "anthropic", etc.
  modelId           String     // Actual model identifier (e.g., "gpt-4o")
  isDefault         Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  @@unique([provider, modelId])
}

model SystemPrompt {
  id                Int        @id @default(autoincrement())
  content           String     @db.Text
  isActive          Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}